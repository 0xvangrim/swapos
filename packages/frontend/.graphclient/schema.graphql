schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type HTLCERC20 {
  id: ID!
  sender: Bytes!
  senderDomain: BigInt!
  senderToken: Bytes!
  senderAmount: BigInt!
  receiver: Bytes
  receiverDomain: BigInt!
  receiverToken: Bytes!
  receiverAmount: BigInt!
  createdAt: BigInt!
  timelock: BigInt!
  sendStatus: HTLCSendStatus!
}

input HTLCERC20_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sender: Bytes
  sender_not: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  senderDomain: BigInt
  senderDomain_not: BigInt
  senderDomain_gt: BigInt
  senderDomain_lt: BigInt
  senderDomain_gte: BigInt
  senderDomain_lte: BigInt
  senderDomain_in: [BigInt!]
  senderDomain_not_in: [BigInt!]
  senderToken: Bytes
  senderToken_not: Bytes
  senderToken_in: [Bytes!]
  senderToken_not_in: [Bytes!]
  senderToken_contains: Bytes
  senderToken_not_contains: Bytes
  senderAmount: BigInt
  senderAmount_not: BigInt
  senderAmount_gt: BigInt
  senderAmount_lt: BigInt
  senderAmount_gte: BigInt
  senderAmount_lte: BigInt
  senderAmount_in: [BigInt!]
  senderAmount_not_in: [BigInt!]
  receiver: Bytes
  receiver_not: Bytes
  receiver_in: [Bytes!]
  receiver_not_in: [Bytes!]
  receiver_contains: Bytes
  receiver_not_contains: Bytes
  receiverDomain: BigInt
  receiverDomain_not: BigInt
  receiverDomain_gt: BigInt
  receiverDomain_lt: BigInt
  receiverDomain_gte: BigInt
  receiverDomain_lte: BigInt
  receiverDomain_in: [BigInt!]
  receiverDomain_not_in: [BigInt!]
  receiverToken: Bytes
  receiverToken_not: Bytes
  receiverToken_in: [Bytes!]
  receiverToken_not_in: [Bytes!]
  receiverToken_contains: Bytes
  receiverToken_not_contains: Bytes
  receiverAmount: BigInt
  receiverAmount_not: BigInt
  receiverAmount_gt: BigInt
  receiverAmount_lt: BigInt
  receiverAmount_gte: BigInt
  receiverAmount_lte: BigInt
  receiverAmount_in: [BigInt!]
  receiverAmount_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  timelock: BigInt
  timelock_not: BigInt
  timelock_gt: BigInt
  timelock_lt: BigInt
  timelock_gte: BigInt
  timelock_lte: BigInt
  timelock_in: [BigInt!]
  timelock_not_in: [BigInt!]
  sendStatus: HTLCSendStatus
  sendStatus_not: HTLCSendStatus
  sendStatus_in: [HTLCSendStatus!]
  sendStatus_not_in: [HTLCSendStatus!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum HTLCERC20_orderBy {
  id
  sender
  senderDomain
  senderToken
  senderAmount
  receiver
  receiverDomain
  receiverToken
  receiverAmount
  createdAt
  timelock
  sendStatus
}

enum HTLCSendStatus {
  PENDING
  COMPLETED
  REFUNDED
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  htlcerc20(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HTLCERC20
  htlcerc20S(
    skip: Int = 0
    first: Int = 100
    orderBy: HTLCERC20_orderBy
    orderDirection: OrderDirection
    where: HTLCERC20_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HTLCERC20!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  htlcerc20(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HTLCERC20
  htlcerc20S(
    skip: Int = 0
    first: Int = 100
    orderBy: HTLCERC20_orderBy
    orderDirection: OrderDirection
    where: HTLCERC20_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HTLCERC20!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}